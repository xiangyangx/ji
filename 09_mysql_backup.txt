备份的方式：
1. 热备份
2. 冷备份

备份的策略：
1. 全备份
2. 增量备份

备份的工具：
热备：msyqldump   mysqlhotcopy  xtrabackup  等等； 
冷备： cp   tar    cpio   rsync 等等。



针对不同的存储引擎有不同备份方式。

这里主要针对的是目前mysql默认的innodb存储引擎。


可以直接跳到后面看实例:

1.热备份
1.1.导出sql的方式。
全备：
mysqldump -uroot -p --single-transaction --all-databases > /root/all.sql
或者
mysqldump -uroot -p  --single-transaction wptest > /root/wptest.sql

恢复使用mysql命令。
mysql  -uroot -p  wptest < /Write_rows: tabroot/wptest.sql

增量备份
借助binlog进行。

－－－－－－－－－－－－－－－－－－－－－
vim /etc/my.cnf
[mysqld]
log_bin
sync_binlog = 1
innodb_support_xa =1

mysql> SHOW BINARY LOGS;
+-------------------+-----------+
| Log_name          | File_size |
+-------------------+-----------+
| mysqld-bin.000001 |       143 |
| mysqld-bin.000002 |       143 |
| mysqld-bin.000003 |       143 |
| mysqld-bin.000004 |       143 |
| mysqld-bin.000005 |       143 |
| mysqld-bin.000006 |       168 |
| mysqld-bin.000007 |      1519 |
+-------------------+-----------+
7 rows in set (0.00 sec)
mysql> mysql> SHOW MASTER STATUS;
+-------------------+----------+--------------+------------------+-------------------+
| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------------+----------+--------------+------------------+-------------------+
| mysqld-bin.000007 |     1519 |              |                  |                   |
+-------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)


实例过程：
mysql> select * from wptest.ziliao; 
+----------+-----------------+---------+-------+
| xingming | chushengnianyue | gongzi  | xuhao |
+----------+-----------------+---------+-------+
| zhangsan | 1990-01-01      | 7000.00 |     3 |
| lisi     | 1993-01-01      | 8000.00 |     4 |
+----------+-----------------+---------+-------+
2 rows in set (0.00 sec)

1. 当前完整的备份，导出所有的sql。
[root@sj01 ~]# mysqldump  -uroot -p wptest --single-transaction --flush-logs > /home/wptest01.sql 

备份后根据时间情况应该有些数据产生。
mysql> insert into wptest.ziliao(xingming,chushengnianyue,gongzi,xuhao) values('wangwu','1992-1-1','8000','5');
Query OK, 1 row affected (0.11 sec)

mysql> insert into wptest.ziliao(xingming,chushengnianyue,gongzi,xuhao) values('zhaoliu','1992-10-1','8000','6');
Query OK, 1 row affected (0.05 sec)


2. 增量备份本次全备之后，下次全备之前的binlog。（binlog的保留时间一定要大于两次全备的时间）

[root@sj01 ~]# cp -a /var/lib/mysql/mysqld-bin.000012 /home/
[root@sj01 ~]# mysqladmin -uroot -p flush-logs

3. 恢复

3.1. 数据丢失
mysql> delete from wptest.ziliao;
Query OK, 4 rows affected (0.08 sec)

mysql> select * from wptest.ziliao;
Empty set (0.00 sec)

3.2.恢复全备的数据
[root@sj01 ~]# mysql -uroot -p  wptest < /home/wptest01.sql

mysql> select * from wptest.ziliao;
+----------+-----------------+---------+-------+
| xingming | chushengnianyue | gongzi  | xuhao |
+----------+-----------------+---------+-------+
| zhangsan | 1990-01-01      | 7000.00 |     3 |
| lisi     | 1993-01-01      | 8000.00 |     4 |
+----------+-----------------+---------+-------+
2 rows in set (0.00 sec)


恢复增量备份的binlog中的数据
[root@sj01 ~]# mysqlbinlog /home/mysqld-bin.000012 |mysql -uroot -p
mysql> select * from wptest.ziliao;
+----------+-----------------+---------+-------+
| xingming | chushengnianyue | gongzi  | xuhao |
+----------+-----------------+---------+-------+
| zhangsan | 1990-01-01      | 7000.00 |     3 |
| lisi     | 1993-01-01      | 8000.00 |     4 |
| wangwu   | 1992-01-01      | 8000.00 |     5 |
| zhaoliu  | 1992-10-01      | 8000.00 |     6 |
+----------+-----------------+---------+-------+
4 rows in set (0.00 sec)

基于时间点的恢复

常用于撤消某个时间段内的错误操作。

在19：29的时候删除一条数据：

mysql> delete from wptest.ziliao where xingming='zhangsan';
Query OK, 1 row affected (0.06 sec)

mysql> select * from wptest.ziliao;
+----------+-----------------+---------+-------+
| xingming | chushengnianyue | gongzi  | xuhao |
+----------+-----------------+---------+-------+
| lisi     | 1993-01-01      | 8000.00 |     4 |
| wangwu   | 1992-01-01      | 8000.00 |     5 |
| zhaoliu  | 1992-10-01      | 8000.00 |     6 |
+----------+-----------------+---------+-------+
3 rows in set (0.00 sec)

在19:32 之后又插入了一些数据：
mysql> insert into wptest.ziliao(xingming,chushengnianyue,gongzi,xuhao) values('liqi','1995-10-18','9000','7');

 发现删除zhangsan用户是个失误，通过binlog找回。

[root@sj01 ~]# mysqladmin -uroot -p flush-logs


[root@sj01 ~]# mysqlbinlog --stop-datetime="2014-04-24 19:28:00" /var/lib/mysql/mysqld-bin.000013  |mysql -uroot -p
mysql> select * from wptest.ziliao;
+----------+-----------------+---------+-------+
| xingming | chushengnianyue | gongzi  | xuhao |
+----------+-----------------+---------+-------+
| zhangsan | 1990-01-01      | 7000.00 |     3 |
| lisi     | 1993-01-01      | 8000.00 |     4 |
| wangwu   | 1992-01-01      | 8000.00 |     5 |
| zhaoliu  | 1992-10-01      | 8000.00 |     6 |
+----------+-----------------+---------+-------+
4 rows in set (0.01 sec)

[root@sj01 ~]# mysqlbinlog --start-datetime="2014-04-24 19:32:00" /var/lib/mysql/mysqld-bin.000013  |mysql -uroot -p

－－－－－－－－－－－－－－－－－－－－－－

基于位置的恢复

有可能你估计的发生误操作的时间段内可能有很多的数据操作，那么需要先导出这一时间段的binlog，然后再找出错误操作的位置(postion)，基于位置进行恢复。

[root@sj01 ~]# mysqlbinlog --start-datetime="2014-04-24 19:45:00" --stop-datetime="2014-04-24 19:47:00" /var/lib/mysql/mysqld-bin.000014 > /tmp/binlog.txt


[root@sj01 ~]# mysqladmin -uroot -p flush-logs

在binlog.txt中找误操作的语句的位置范围。

比如 从4774到4893位置间产生了误操作。



基于位置恢复：
[root@sj01 ~]# mysqlbinlog --stop-position="4774" /var/lib/mysql/mysqld-bin.000014 |mysql -uroot -p
Enter password: 
[root@sj01 ~]# mysqlbinlog --start-position="4893" /var/lib/mysql/mysqld-bin.000014 |mysql -uroot -p
Enter password: 


－－－－－－－－－－－－－－－－－－－－－－－－－
冷备份
停止数据库，用户使用复制的方式进行备份。基于物理意义的操作系统级备份。
优点，相对sql导出,简单，快速，稳定。
缺点，可能需要长时间停库。
需要说明的是，如果恢复数据库mysql程序版本发生了变化，比如升级，需要运行mysql_upgrade来进行表检查和修复。另外注意文件的权限。


－－－－－－－－－－－－－－－－－－－－－－－－
能不能在不停库情况，进行物理拷贝。

方式1： 热备份，mysqlhotcopy 只针对myISAM存储引擎(实际上mysqlhotcopy的脚本进行表只读锁)。

方式2： mysql enterprise backup 或 ibbackup 商业收费

方式3： xtrabackup 开源免费

# xtrabackup --backup

方式4：利用LVM快照的方式进行备份。

-----------------------------实例1: 热备,全备,增量备份----------------------------------

1. 准备工作:

准备一个全新的虚拟机, 初始化(配置ip , hostname, hosts , sshd, yum, iptables, selinux 等);
安装mysql, mysql-server(5.6.22) , httpd , php相关等;
配置和启动 mysqld, httpd , 能运行phpinfo();
下载和安装wordpress 或者DZ bbs , 及相关插件.  利用wordpress发布文章,进行备份恢复测试.

2. mysqldump全备和mysql的恢复;

单个数据库的全备:
mysqldump -uroot -p --single-transaction www > /root/www.sql
即将www的数据库完整备份到www.sql文件中；注意其中--single-transaction的工作原理;

单个数据库的恢复操作:
wordpress后台操作删除几个文章,尝试恢复;
mysql -uroot -p www < /root/www.sql

如果整个mysql数据库目录被删,如何恢复:
a. 先重启数据库,自动重建系统库（rpm）;
[root@mysql mysql]# mysqld  --initialize  --datadir=/data/mysql  --basedir=/usr/local/mysql/  --user=mysql  （源码最新版）

在日志中找root密码，

b. 登录数据库,修改root密码， 手动重新建应用库www, 并授权应用原用户权限; 
c. 再次使用已备份的www.sql来恢复应用数据.

所以建议要定期使用 
mysqldump -uroot -p --single-transaction --all-databases > /root/all.sql
对整个数据库使用完整备份.

全库导入：
[root@mysql mysql]# mysql  -uroot  -p   < /root/all.sql

3. 开启二进制日志, 使用增量备份:

配置文件:
# vim /etc/my.cnf
log_bin
sync_binlog = 1
innodb_support_xa = 1

#service mysqld restart

先作一次全备:
# mysqldump -uroot --single-transaction --all-databases > /root/all.sql
# mysqladmin -uroot flush-logs

进行数据插入的操作(发布新的文章)

增量备份即备份全备之后的二进制日志:
# cp mysqld-bin.000002 /root/

将应用的全部数据丢失,尝试恢复:
a. 恢复全备数据
# mysql -uroot < /root/all.sql
b. 通过二进制日志恢复增量数据
mysqlbinlog /root/mysqld-bin.000002 |mysql -uroot


4. 基于时间点(或位置)的排除误操作的恢复

重建新的二进制日志文件
# mysqladmin -uroot flush-logs

在上一次备份后, 应该创建了一些新的应用数据,也删除了一些应用, 假设删除的应用数据是误删,那么需要在恢复数据的时候, 跳过删除应用的时间点.

先恢复全备的数据:
# mysql -uroot < /root/all.sql

再恢复二进制日志文件的前半部分:
# mysqlbinlog --stop-datetime="2014-12-08 12:03:00" mysqld-bin.000003 |mysql -uroot

跳过误操作的日志记录时间点后, 恢复二进制日志文件的后半部分:
# mysqlbinlog --start-datetime="2014-12-08 12:06:00" mysqld-bin.000003 |mysql -uroot


----------------------------------实例1 END---------------------

----------------------------------实例2 使用xtrabackup工具来进行hotcopy-------------

安装:
[root@mysql ~]# yum  install  http://192.168.20.1/software/libev-4.15-3.el7.x86_64.rpm

[root@mysql ~]# yum  install  http://192.168.20.1/software/percona-xtrabackup-24-2.4.6-2.el7.x86_64.rpm



1. 全备:

mysql目前正在运行的状态:
# service mysqld status
mysqld (pid  2816) is running...

xtrabackup需要根据my.cnf中的datadir选项定义的目录来确定数据库文件存放目录:
datadir=/var/lib/mysql

创建全备数据库文件的存放目录:
# mkdir -p /data/backups

将数据库备份到指定的目录中:
[root@mysql ~]# innobackupex -u root  -p 123456  -H localhost  -P 3306  -S  /tmp/mysql.sock     /backups/

具体目录如下:

[root@mysql backups]# ls  2017-04-05_17-37-03/
backup-my.cnf  ib_buffer_pool  linux  performance_schema  xtrabackup_binlog_info  xtrabackup_info
bbs            ibdata1         mysql  sys                 xtrabackup_checkpoints  xtrabackup_logfile

全备恢复:

先进行恢复前的预处理:
[root@mysql backups]# innobackupex --use-memory=100M --apply-log  2017-04-05_17-37-03/

停掉正在运行的数据库实例:
# service mysqld stop

删除出了问题的原数据库文件:
# rm -rf /data/mysql/*

恢复操作:
# innobackupex --copy-back /data/backups/2014-12-08_16-28-50/


[root@mysql backups]# innobackupex --copy-back  2017-04-05_17-37-03/

修正数据文件的权限:
# chown -R mysql:mysql /data/mysql/*


[root@mysql backups]# chown -R mysql:mysql   /data/mysql
[root@mysql backups]# ls   /data/mysql/
bbs             ibdata1      ib_logfile1  linux  performance_schema  xtrabackup_binlog_pos_innodb
ib_buffer_pool  ib_logfile0  ibtmp1       mysql  sys                 xtrabackup_info

再次启动数据库, 并测试应用数据是否恢复:
# service mysqld start

2. 增量备份:

每个增量备份必须要基于一个完整的全备, 所以在开始前先创建一个全备.
# innobackupex /data/backups

为增量备份创建目录:
# mkdir -p /data/inc 

进行增量备份:
# innobackupex --incremental /data/inc/  --incremental-basedir=/data/backups/2014-12-08_16-52-35

备份结果如下:
# ls /data/inc/2014-12-08_16-58-39/
backup-my.cnf  ibdata1.delta  mysql               www   xtrabackup_binlog_info  xtrabackup_info
bbs            ibdata1.meta   performance_schema  wwww  xtrabackup_checkpoints  xtrabackup_logfile

# du -sh /data/inc/2014-12-08_16-58-39/
5.6M	/data/inc/2014-12-08_16-58-39/


全备+增量备份的恢复:

恢复前的prepare操作:

# innobackupex --apply-log --redo-only  /data/backups/2014-12-08_16-52-35/  --use-memory=100M 


# innobackupex --apply-log --redo-only /data/backups/2014-12-08_16-52-35/  --incremental-dir=/data/inc/2014-12-08_16-58-39/ --use-memory=100M 

接下来恢复过程等同于之前的全备恢复.

----------------------------------实例 2 END ---------------------

------------------------------实例3 : 利用逻辑卷快照的技术进行hotcopy-------------------
准备工作(略): 将/var/lib/mysql的存储设备对应到一个独立的逻辑卷.结果如下:
# df -h 
/dev/mapper/vg00-lv_mysql     9.9G  265M  9.1G   3% /var/lib/mysql

为lv_mysql的逻辑卷创建快照:
# lvcreate --size 100m --snapshot --name snap_mysql  /dev/vg00/lv_mysql

挂载快照到目录:
/dev/mapper/vg00-snap_mysql   9.9G  265M  9.1G   3% /snap

LVM的快照会记录下数据库原逻辑卷lv_mysql的初始状态(cow写时复制技术), 即使用lv_mysql的内容发生变化,快照中的文件也会保持创建快照的初始状态不变. 那么则可以对快照中的内容进行一致性的系统级的物理备份.
在备份的过程中, 原数据库的数据变化量不能超过快照的设置的容量大小(根据经验预估).



